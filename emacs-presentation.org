#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:t
#+OPTIONS: reveal_mathjax:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+OPTIONS: toc:nil
#+REVEAL_MARGIN: 0.0
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.0
#+REVEAL_TRANS: none
#+REVEAL_THEME: night
#+REVEAL_HLEVEL: 1
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in

#+TITLE: Spacemacs: best Rails IDE you've ever seen
* Spacemacs - an introduction
** What is Emacs?
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in) :frag-idx (number-sequence 1 4)
- Text editor
- Swiss army knife
- Best Git client I've ever worked with
- "Last Lisp Machine"
** What is Spacemacs?
*** First things first
#+ATTR_HTML: :width 100%
[[./dogemacs.png]]
*** Really, what is Spacemacs?
#+ATTR_REVEAL: :frag t
From their [[https://github.com/syl20bnr/spacemacs/][Github]] page:
#+BEGIN_QUOTE
Spacemacs is a new way to experience Emacs -- a sophisticated and polished set-up focused on ergonomics, mnemonics and consistency.

Just clone it, launch it, then press the space bar to explore the interactive list of carefully-chosen key bindings. You can also press the home buffer's [?] button for some great first key bindings to try.

Spacemacs can be used naturally by both Emacs and Vim users -- you can even mix the two editing styles. Switching easily between input styles makes Spacemacs a great tool for pair-programming.
#+END_QUOTE
** Why should I care?
#+ATTR_REVEAL: :frag t
It comes with a lot of integrated goodies to help with development.
"Help" is a misnomer here - most modes are on par with so-called
"professional" tools, and for less mainstream languages, it's actually
the best development environment.

#+ATTR_REVEAL: :frag t
It can be used by both Vim and Emacs users - so if you think Emacs "is
a good OS, just lacking a decent editor", think again.
* so Vim
** Ubiquitous hjkl movement
#+ATTR_REVEAL: :frag t
No need to move your fingers out of the home row - hjkl works as expected.

#+ATTR_REVEAL: :frag t
Not only that, but almost all Vim commands work as expected.

#+ATTR_REVEAL: :frag t
Emacs keybindings' are setup per-mode, so to make it work seamlessly
across all modes is harder than it looks.

#+ATTR_REVEAL: :frag t
Even very customized modes, such as Org-mode and Magit, accept hjkl movement.
** Vim "language" works, and is extensible
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in) :frag-idx (1 2 3)
- Verbs (a, i, o, y, p, c, d, >, <)
- Movement keys (f, t, /, ?, *, #, %)
- Bonus: you can define your own, if you know enough Emacs Lisp (even the "original" operators are defined like this)
** Ex commands
Some cookbook examples:
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in) :frag-idx (1 2 3 4)
- s/hello/world
- g/cookbook/d
- 4,15t$
- g/test/m0
  #+BEGIN_NOTES
  Substitutes 'hello' for 'world' in the current line

  Deletes lines matching 'cookbook'

  Moves content from lines 4 to 15 to the end of the current file

  Moves the first line matching 'test' to the first line of the current file
  #+END_NOTES
** Registers
They basically work as expected. The verb is " (double quote). Some
examples to illustrate:
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in) :frag-idx (1 2 3)
- "ay$ (overwrite register 'r' with contents from point to the end of the line)
- "A2dd (append to register 'a' the contents of the next two lines and delete them)
- qb <some commands here> (see next section...)
** Keyboard macros
The 'q' verb is used for saving keyboard macros. Save to registers,
and even edit them (try it with "C-x C-k e").
** Leader keys
- Universal leader key (SPC)
- Mode-specific leader key (,)
** Ergonomics
Every command is triggered with at most 3 keystrokes.
* much discoverability
** Which-key
#+BEGIN_QUOTE
Which-key displays the key bindings following your currently entered incomplete command (a prefix) in a popup.
#+END_QUOTE

#+ATTR_REVEAL: :frag t
[[./which-key.png]]
** Help screens
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in) :frag-idx (1 2 3 4)
- Integrated help screens for every command
  [[./help-screen-describe-key.png]]
- Integrated man pages (woman)
  [[./curl-manpage.png]]
- Apropos for commands
  [[./helm-apropos.png]]
- Various 'describe' commands
  [[./spacemacs-describes.png]]
** Helpful community
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in) :frag-idx (1 2 3 4) 
- [[https://github.com/syl20bnr/spacemacs/][Github]]
- [[https://gitter.im/syl20bnr/spacemacs][Gitter chat]]
- [[http://spacemacs.org/doc/DOCUMENTATION][Quality documentation]]
- Blog posts
#+BEGIN_NOTES
Spacemacs devs' are usually responsive to PRs (albeit somewhat slow to
merge), there are lots of quality blog posts and new features are
being added all the time.
#+END_NOTES
* much layers (IDE-style features)
** What is a layer?
#+BEGIN_QUOTE
Layers help collect related packages together to provide features. For
example, the python layer provides auto-completion, syntax checking,
and repl support for python files. This approach helps keep
configuration organized and reduces overhead for the user by keeping
them from having to think about what packages to install
#+END_QUOTE

#+ATTR_REVEAL: :frag t
In other words: preconfigured goodies for your favorite language.

** Auto-completion
Two backends for this: [[http://company-mode.github.io/][company]] and [[http://auto-complete.org/][auto-complete]]. Both are good on
their own right.

#+ATTR_REVEAL: :frag t
[[./company-semantic.png]]

#+ATTR_REVEAL: :frag (roll-in roll-in) :frag-idx (1 2) 
- Most modes have no Intellisense!
- Some languages (such as Ruby and Python) implement it

#+BEGIN_NOTES
That is, they don't feature context-aware autocompletion. Bummer.

It's mostly dynamic languages, that basically run a REPL and can
provide much better run-time information. Try that in Java or C# -
Emacs' Java integration still sucks, despite Eclim and other projects.
But, if you're an Emacs user, you're probably better served by
lighter-weight languages.

I'm biased towards company, but only because it's Spacemacs' default.
#+END_NOTES
** Syntax checking
[[http://www.flycheck.org/en/latest/][Flycheck]], Emacs' flexible backend for almost every syntax-checking tool.

#+ATTR_REVEAL: :frag t
[[./flycheck-annotated.png]]

#+ATTR_REVEAL: :frag t
Basically anything that can output an Emacs-style "backtrace" can be
hooked into it.
** Code snippets!
[[http://joaotavora.github.com/yasnippet/][Yasnippet]], Emacs' backend for code snippets, actually accepts Sublime
Text snippets.

#+ATTR_REVEAL: :frag t
[[./yasnippet.png]]

#+ATTR_REVEAL: :frag t
It also accepts inline Lisp code (so you can make decisions about how to expand a snippet based on the state of your editor - how cool is that?)
** REPL support
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in) :frag-idx (1 2 3)
- Run a REPL inside the editor
- Run commands while editing the file
- REPLs get Vim-style keybindings for free
** MELPA
From their [[https://melpa.org][website]]:

#+BEGIN_QUOTE
Up-to-date packages built on our servers from upstream source
Installable in any Emacs with 'package.el' - no local version-control tools needed
Curated - no obsolete, renamed, forked or randomly hacked packages
Comprehensive - more packages than any other archive
Automatic updates - new commits result in new packages
Extensible - contribute recipes via github, and we'll build the packages
#+END_QUOTE

#+BEGIN_NOTES
Did I mention Emacs has a package manager? After that, all else
is...forgivable. Before Vimmers start complaining, you have Vundle.
#+END_NOTES
* very Git
** It's Magit!
Thanks to [[https://magit.vc/][Magit]], Spacemacs has one of the best Git clients available.

#+ATTR_REVEAL: :frag t
Benefits:
#+ATTR_REVEAL: :frag (roll-in roll-in roll-in roll-in roll-in) :frag-idx (1 2 3 4 5) 
- Comprehensive status buffer
- Most commands are 2-3 keystrokes away
- Discoverable interface
  
  It makes git look easy...almost.
- git-link
- git-timemachine
** Status buffer
[[./magit-status.png]]
** Log
[[./magit-log.png]]
** Rebase
[[./magit-rebase.png]]
** Discoverable
[[./magit-discoverable.png]]
** Diff
[[./magit-diff.png]]
*** Inline diff!
[[./magit-inline-diff.png]]
* wow (demo time)
